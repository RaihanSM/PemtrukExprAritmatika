//NOMOR 1 Parsing String Infix

//Sample ekspresi 0 : 12*5+7-(23+2)/5-4 	  => 12 * 5 + 7 - ( 23 + 2 ) / 5 - 4
//Sample ekspresi 1 : 2+-(4 + 6)			      => 2 + -1 * ( 4 + 6 )
//Sample ekspresi 2 : 7+18-5*7			        => 7 + 18 - 5 * 7
//Sample ekspresi 3 : 20 +2-4*3+(17-5)/2	  => 20 + 2 - 4 * 3 + ( 17 - 5 ) / 2
//Sample ekspresi 4 : 18+-5*(12- 9)		      => 18 + -1 * 5 * ( 12 - 9 )
//Sample ekspresi 5 : -9 +(20/5-4)		      => -9 + ( 20 / 5 - 4 )
//Sample ekspresi 6 : 7+18-5*7			        => 7 + 18 - 5 * 7
//Sample ekspresi 7 : -(7/8) - 1/8		      => -1 * ( 7 / 8 ) - 1 / 8
//Sample ekspresi 8 : -49 - 17%5 * 2		    => -49 - 17 % 5 * 2

#include <vector>
#include <iostream>
#include <ctype.h>
using namespace std;

int main() {
    string var; getline(cin,var);
    vector<char> variabel;
    long unsigned int x; int i;
    
    for(i=0; i<var.length(); i++){
        if(var[i] == ' ')
            continue;
        else if(isdigit(var[i])){ 
            while(i<var.length() && isdigit(var[i])){
                variabel.push_back(var[i]);
                i++;
            }
            i--;
        }
        else if(var[i] == '-'){
            variabel.push_back(var[i]);
            if(i==0){
                if(isdigit(var[i+1])){
                    i++;
                    while(i<var.length() && isdigit(var[i])){
                        variabel.push_back(var[i]);
                        i++;
                    }
                    i--;
                } else {
                    variabel.push_back('1');
                    variabel.push_back(' ');
                    variabel.push_back('*');
                }
            } else {
                if(!isdigit(var[i-1]) && var[i+1] != ' '){
                    variabel.push_back('1');
                    variabel.push_back(' ');
                    variabel.push_back('*');
                } 
            }
        } else
            variabel.push_back(var[i]);
        variabel.push_back(' ');
    }
    for(auto x:variabel)
        cout << x;
    return 0;
}
